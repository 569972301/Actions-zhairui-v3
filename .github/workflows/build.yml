name: 自动内核编译与BBR v3安装

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write  # 为 GITHUB_TOKEN 授予内容的写权限

jobs:
  build_kernel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的 Git 历史

      - name: 安装依赖
        run: |
          sudo apt update
          sudo apt install -y build-essential libncurses-dev flex bison debhelper libelf-dev libssl-dev bc rsync dwarves git fakeroot dkms
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            sudo apt install -y crossbuild-essential-arm64
          fi

      - name: 设置交叉编译环境 (仅针对 ARM64)
        if: matrix.arch == 'arm64'
        run: |
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV

      - name: 下载内核源码
        run: |
          git clone https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
          cd linux

      - name: 获取最新的内核版本号
        run: |
          cd linux
          KERNEL_VERSION=$(make kernelversion)
          echo "当前内核版本为：$KERNEL_VERSION"
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

      - name: 添加 BBR v3 源码仓库并拉取代码
        run: |
          cd linux
          git remote add google-bbr https://github.com/google/bbr.git
          git fetch google-bbr
          git checkout google-bbr/v3

      - name: 拉取完 BBR v3 后写版本号进 Makefile
        run: |
          cd linux
          sed -i "s/^VERSION = .*/VERSION = ${KERNEL_VERSION%%.*}/" Makefile
          sed -i "s/^PATCHLEVEL = .*/PATCHLEVEL = $(echo $KERNEL_VERSION | cut -d. -f2)/" Makefile
          sed -i "s/^SUBLEVEL = .*/SUBLEVEL = $(echo $KERNEL_VERSION | cut -d. -f3 | cut -d- -f1)/" Makefile

      - name: 复制自定义配置文件
        run: |
          cd linux
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            cp "$GITHUB_WORKSPACE/arm64.config" .config
          else
            cp "$GITHUB_WORKSPACE/x86-64.config" .config
          fi

      - name: 自动接受默认配置
        run: |
          cd linux
          yes "" | make olddefconfig

      - name: 修改 .config 配置
        run: |
          cd linux
          # 删除可能存在的 CONFIG_SYSTEM_TRUSTED_KEYS 行
          sed -i '/CONFIG_SYSTEM_TRUSTED_KEYS/d' .config
          # 设置 CONFIG_SYSTEM_TRUSTED_KEYS 为空
          echo 'CONFIG_SYSTEM_TRUSTED_KEYS=""' >> .config
          # 禁用调试信息以加快编译速度
          sed -i 's/CONFIG_DEBUG_INFO=y/CONFIG_DEBUG_INFO=n/' .config

      - name: 开始编译内核
        run: |
          cd linux
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- LOCALVERSION=-joeyblog-joeyblog.net bindeb-pkg -j$(nproc)
          else
            make LOCALVERSION=-joeyblog-joeyblog.net bindeb-pkg -j$(nproc)
          fi

      - name: 收集内核包
        run: |
          mkdir -p output/${{ matrix.arch }}
          find $GITHUB_WORKSPACE -path "$GITHUB_WORKSPACE/output" -prune -o -name "*.deb" -exec mv {} output/${{ matrix.arch }}/ \;

      - name: 上传内核包
        uses: actions/upload-artifact@v4
        with:
          name: kernel-debs-${{ matrix.arch }}
          path: output/${{ matrix.arch }}/

  release_kernel:
    needs: build_kernel
    runs-on: ubuntu-latest
    steps:
      - name: 下载 x86_64 内核包
        uses: actions/download-artifact@v4
        with:
          name: kernel-debs-x86_64
          path: ./output/x86_64/
      - name: 下载 arm64 内核包
        uses: actions/download-artifact@v4
        with:
          name: kernel-debs-arm64
          path: ./output/arm64/
      - name: 列出 x86_64 内核包
        run: ls -alh ./output/x86_64/
      - name: 列出 arm64 内核包
        run: ls -alh ./output/arm64/
      - name: 获取内核版本号
        run: |
          DEB_FILE=$(ls ./output/x86_64/linux-image-*.deb | head -n 1)
          KERNEL_VERSION=$(echo "$DEB_FILE" | grep -oP 'linux-image-\K[0-9.]+')
          echo "提取的内核版本号为：$KERNEL_VERSION"
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
      - name: 创建发布版本
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 'v${{ env.KERNEL_VERSION }}'
          release_name: 'Kernel Build v${{ env.KERNEL_VERSION }}'
          draft: false
          prerelease: false
      - name: 打包 x86_64 内核包
        run: |
          cd ./output/x86_64/
          tar -czvf linux-x86_64-${{ env.KERNEL_VERSION }}.tar.gz *.deb
      - name: 打包 arm64 内核包
        run: |
          cd ./output/arm64/
          tar -czvf linux-arm64-${{ env.KERNEL_VERSION }}.tar.gz *.deb
      - name: 上传 x86_64 内核包到发布版本
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/x86_64/linux-x86_64-${{ env.KERNEL_VERSION }}.tar.gz
          asset_name: linux-x86_64-${{ env.KERNEL_VERSION }}.tar.gz
          asset_content_type: application/gzip
      - name: 上传 arm64 内核包到发布版本
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/arm64/linux-arm64-${{ env.KERNEL_VERSION }}.tar.gz
          asset_name: linux-arm64-${{ env.KERNEL_VERSION }}.tar.gz
          asset_content_type: application/gzip
