name: 使用BBRv3构建内核

on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
    env:
      ARCH: ${{ matrix.arch }}
      KERNEL_VERSION: ""
      LOCALVERSION: "-joeyblog"
    steps:
      - name: 获取内核版本号
        id: get_kernel_version
        run: |
          version=$(curl -s https://www.kernel.org | grep -A 1 -m 1 "stable:" | grep -oP '\d+\.\d+\.\d+')
          echo "KERNEL_VERSION=$version" >> $GITHUB_ENV
          echo "::set-output name=kernel_version::$version"  # 设置步骤输出
        shell: bash

      - name: 拉取代码仓库
        uses: actions/checkout@v4

      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git build-essential \
            libncurses-dev libssl-dev libelf-dev \
            libudev-dev libpci-dev libcap-dev libpcre2-dev \
            bison bc flex rsync debhelper \
            dpkg-dev fakeroot kmod cpio dwarves lz4 zstd xz-utils
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: 创建内核目录
        run: mkdir ./kernel/

      - name: 下载内核源代码
        working-directory: ./kernel/
        run: |
          kernel_branch=$(echo "${{ env.KERNEL_VERSION }}" | grep -oP '^\d+\.\d+')
          git clone --branch linux-$kernel_branch.y https://github.com/gregkh/linux.git

      - name: 添加Google BBRv3补丁
        working-directory: ./kernel/linux/
        run: |
          git remote add google-bbr https://github.com/google/bbr.git
          git fetch google-bbr
          git checkout google-bbr/v3

      - name: 设置内核版本信息
        working-directory: ./kernel/linux/
        run: |
          IFS='.' read -r version patchlevel sublevel <<< "${{ env.KERNEL_VERSION }}"
          sed -i "s/^VERSION = .*/VERSION = $version/" Makefile
          sed -i "s/^PATCHLEVEL = .*/PATCHLEVEL = $patchlevel/" Makefile
          sed -i "s/^SUBLEVEL = .*/SUBLEVEL = $sublevel/" Makefile
          echo "${{ env.LOCALVERSION }}" > localversion

      - name: 设定内核配置文件
        working-directory: ./kernel/linux/
        run: |
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            cp "${{ github.workspace }}/arm64.config" .config
            make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig
          else
            cp "${{ github.workspace }}/x86-64.config" .config
            make olddefconfig
          fi

      - name: 编译内核并打包deb
        working-directory: ./kernel/linux/
        run: |
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- bindeb-pkg -j$(nproc)
          else
            make bindeb-pkg -j$(nproc)
          fi

      - name: 压缩deb文件为tar.gz
        working-directory: ./kernel/
        run: |
          tar -czf kernel_release_${{ env.ARCH }}_${{ env.KERNEL_VERSION }}.tar.gz linux-*.deb

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ env.ARCH }}
          path: ./kernel_release_${{ env.ARCH }}_${{ env.KERNEL_VERSION }}.tar.gz

    outputs:
      kernel_version: ${{ steps.get_kernel_version.outputs.kernel_version }}

  release:
    runs-on: ubuntu-latest
    needs: build
    if: success()
    steps:
      - name: 下载arm64构建产物
        uses: actions/download-artifact@v3
        with:
          name: release-arm64

      - name: 下载x86_64构建产物
        uses: actions/download-artifact@v3
        with:
          name: release-x86_64

      - name: 发布到GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "${{ needs.build.outputs.kernel_version }}"
          name: "Kernel ${{ needs.build.outputs.kernel_version }} (arm64 & x86_64) Latest"
          files: |
            kernel_release_arm64_${{ needs.build.outputs.kernel_version }}.tar.gz
            kernel_release_x86_64_${{ needs.build.outputs.kernel_version }}.tar.gz
          body: |
            Auto-generated release for kernel version ${{ needs.build.outputs.kernel_version }} (arm64 & x86_64)

            自动更新
