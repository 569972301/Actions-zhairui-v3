name: Build and Release Kernel

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # 编译任务
  build-kernel:
    strategy:
      matrix:
        arch: [x86_64, arm64] # 定义支持的架构
    runs-on: ubuntu-22.04
    outputs:
      artifact-${{ matrix.arch }}: ${{ steps.save-artifacts.outputs.artifact-path }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y git build-essential libncurses-dev libssl-dev libelf-dev bison bc flex rsync debhelper vim gcc make zlib1g-dev libbz2-dev fakeroot kmod libncurses5 dkms jq curl

      - name: Fetch Kernel Source
        run: |
          git clone --branch $(git ls-remote --tags https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git | grep -E '^v[0-9]+\.[0-9]+(\.[0-9]+)?$' | grep -v -E "rc|test" | sort -V | tail -1 | awk -F'/' '{print $3}') --depth 1 https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
          cd linux
          echo "Kernel version: $(make kernelversion)"

      - name: Add BBR and Update Makefile
        run: |
          cd linux
          git remote add google-bbr https://github.com/google/bbr.git
          git fetch google-bbr
          git checkout google-bbr/v3
          echo "Updated Makefile with kernel version."

      - name: Build Kernel
        run: |
          cd linux
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            curl -L https://raw.githubusercontent.com/byJoey/Actions-bbr-v3/main/arm64.config -o .config
          else
            curl -L https://raw.githubusercontent.com/byJoey/Actions-bbr-v3/main/x86-64.config -o .config
          fi
          yes "" | make oldconfig
          sed -i '/CONFIG_SYSTEM_TRUSTED_KEYS/d' .config
          echo 'CONFIG_SYSTEM_TRUSTED_KEYS=""' >> .config
          sed -i 's/CONFIG_DEBUG_INFO=y/CONFIG_DEBUG_INFO=n/' .config
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            make ARCH=arm64 LOCALVERSION=-joeyblog bindeb-pkg -j$(nproc)
            mkdir -p ../kernel_release/arm64
            mv ../linux-image-*.deb ../linux-headers-*.deb ../kernel_release/arm64/
          else
            make ARCH=x86_64 LOCALVERSION=-joeyblog bindeb-pkg -j$(nproc)
            mkdir -p ../kernel_release/x86_64
            mv ../linux-image-*.deb ../linux-headers-*.deb ../kernel_release/x86_64/
          fi

      - name: Save Artifacts
        id: save-artifacts
        run: |
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            echo "::set-output name=artifact-path::kernel_release_arm64.tar.gz"
            tar -czvf kernel_release_arm64.tar.gz -C ../kernel_release/arm64 .
          else
            echo "::set-output name=artifact-path::kernel_release_x86_64.tar.gz"
            tar -czvf kernel_release_x86_64.tar.gz -C ../kernel_release/x86_64 .
          fi

  # 发布任务
  release-kernel:
    needs: build-kernel # 依赖编译任务完成
    runs-on: ubuntu-22.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: kernel_release_arm64.tar.gz
          path: kernel_release_arm64.tar.gz

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: kernel_release_x86_64.tar.gz
          path: kernel_release_x86_64.tar.gz

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v$(date +'%Y%m%d')"
          echo "Creating GitHub release with tag $TAG"
          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"tag_name\": \"$TAG\", \"name\": \"Kernel Build $TAG\", \"body\": \"Automated kernel build including ARM64 and x86_64\"}" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/releases

      - name: Upload ARM64 artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          UPLOAD_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$TAG | jq -r .upload_url | sed -e "s/{?name,label}//")
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/gzip" --data-binary @kernel_release_arm64.tar.gz "$UPLOAD_URL?name=kernel_release_arm64.tar.gz"

      - name: Upload x86_64 artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          UPLOAD_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$TAG | jq -r .upload_url | sed -e "s/{?name,label}//")
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/gzip" --data-binary @kernel_release_x86_64.tar.gz "$UPLOAD_URL?name=kernel_release_x86_64.tar.gz"
