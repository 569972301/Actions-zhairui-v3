name: Build and Release Kernel

on:
  push:
    branches:
      - main  # 当代码推送到 main 分支时触发
  workflow_dispatch: # 支持手动触发工作流

jobs:
  # 编译内核任务
  build-kernel:
    name: 编译内核
    strategy:
      matrix:
        arch: [x86_64, arm64] # 定义目标架构
    runs-on: ubuntu-22.04 # 使用 Ubuntu 22.04 运行器
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v3

      # 安装依赖
      - name: 安装构建依赖
        run: |
          echo "更新并安装必要的构建依赖..."
          sudo apt update
          sudo apt install -y git build-essential libncurses-dev libssl-dev libelf-dev bison bc flex rsync debhelper vim gcc make zlib1g-dev libbz2-dev fakeroot kmod libncurses5 dkms jq curl

      # 获取最新内核版本
      - name: 获取最新内核版本
        run: |
          echo "获取内核源码仓库的最新稳定版本..."
          LATEST_KERNEL_VERSION=$(git ls-remote --tags https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git | grep -E '^v[0-9]+\.[0-9]+(\.[0-9]+)?$' | grep -v -E "rc|test" | sort -V | tail -1 | awk -F'/' '{print $3}')
          echo "最新内核版本: $LATEST_KERNEL_VERSION"
          echo "kernel_version=$LATEST_KERNEL_VERSION" >> $GITHUB_ENV

      # 拉取内核源码
      - name: 拉取内核源码
        run: |
          git clone --branch ${{ env.kernel_version }} --depth 1 https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
          cd linux
          echo "当前内核版本: $(make kernelversion)"

      # 添加 BBR 源码并更新 Makefile
      - name: 添加 BBR 源码并更新 Makefile
        run: |
          cd linux
          echo "添加 BBR 源码..."
          git remote add google-bbr https://github.com/google/bbr.git
          git fetch google-bbr
          git checkout google-bbr/v3
          echo "更新 Makefile 的版本号信息..."
          KERNEL_VERSION=$(make kernelversion)
          sed -i "s/^VERSION = .*/VERSION = ${KERNEL_VERSION%%.*}/" Makefile
          sed -i "s/^PATCHLEVEL = .*/PATCHLEVEL = $(echo $KERNEL_VERSION | cut -d. -f2)/" Makefile
          sed -i "s/^SUBLEVEL = .*/SUBLEVEL = $(echo $KERNEL_VERSION | cut -d. -f3 | cut -d- -f1)/" Makefile
          echo "Makefile 已成功更新。"

      # 编译内核
      - name: 编译内核
        run: |
          cd linux
          # 根据架构选择配置文件
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            echo "下载 ARM64 配置文件..."
            curl -L https://raw.githubusercontent.com/byJoey/Actions-bbr-v3/main/arm64.config -o .config
          else
            echo "下载 x86_64 配置文件..."
            curl -L https://raw.githubusercontent.com/byJoey/Actions-bbr-v3/main/x86-64.config -o .config
          fi
          # 使用非交互模式设置默认值
          yes "" | make oldconfig
          sed -i '/CONFIG_SYSTEM_TRUSTED_KEYS/d' .config
          echo 'CONFIG_SYSTEM_TRUSTED_KEYS=""' >> .config
          sed -i 's/CONFIG_DEBUG_INFO=y/CONFIG_DEBUG_INFO=n/' .config
          # 开始编译
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            echo "开始编译 ARM64 内核..."
            make ARCH=arm64 LOCALVERSION=-joeyblog bindeb-pkg -j$(nproc)
            mkdir -p ../kernel_release/arm64
            mv ../linux-image-*.deb ../linux-headers-*.deb ../kernel_release/arm64/
            tar -czvf kernel_release_arm64.tar.gz -C ../kernel_release/arm64 .
          else
            echo "开始编译 x86_64 内核..."
            make ARCH=x86_64 LOCALVERSION=-joeyblog bindeb-pkg -j$(nproc)
            mkdir -p ../kernel_release/x86_64
            mv ../linux-image-*.deb ../linux-headers-*.deb ../kernel_release/x86_64/
            tar -czvf kernel_release_x86_64.tar.gz -C ../kernel_release/x86_64 .
          fi

      # 上传构建产物
      - name: 上传构建产物
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.arch }}_kernel_release
          path: |
            kernel_release_arm64.tar.gz
            kernel_release_x86_64.tar.gz

  # 发布任务
  release-kernel:
    name: 发布内核
    needs: build-kernel # 依赖编译内核任务完成
    runs-on: ubuntu-22.04
    steps:
      # 下载 ARM64 构建产物
      - name: 下载 ARM64 构建产物
        uses: actions/download-artifact@v3
        with:
          name: arm64_kernel_release
          path: kernel_release_arm64.tar.gz

      # 下载 x86_64 构建产物
      - name: 下载 x86_64 构建产物
        uses: actions/download-artifact@v3
        with:
          name: x86_64_kernel_release
          path: kernel_release_x86_64.tar.gz

      # 创建 GitHub Release
      - name: 创建 GitHub 发行版本
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v$(date +'%Y%m%d')"
          echo "正在创建 GitHub 发行版本，标签为 $TAG..."
          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"tag_name\": \"$TAG\", \"name\": \"Kernel Build $TAG\", \"body\": \"自动构建的内核版本，包括 ARM64 和 x86_64 支持。\"}" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/releases

      # 上传 ARM64 内核包
      - name: 上传 ARM64 内核包
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          UPLOAD_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$TAG | jq -r .upload_url | sed -e "s/{?name,label}//")
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/gzip" --data-binary @kernel_release_arm64.tar.gz "$UPLOAD_URL?name=kernel_release_arm64.tar.gz"

      # 上传 x86_64 内核包
      - name: 上传 x86_64 内核包
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          UPLOAD_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$TAG | jq -r .upload_url | sed -e "s/{?name,label}//")
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/gzip" --data-binary @kernel_release_x86_64.tar.gz "$UPLOAD_URL?name=kernel_release_x86_64.tar.gz"
