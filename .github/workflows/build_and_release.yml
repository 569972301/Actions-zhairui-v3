name: Build Kernel and Release (Two Containers)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-x86:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 安装x86_64构建依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y git build-essential libncurses-dev libssl-dev libelf-dev bison bc flex rsync debhelper \
             vim gcc make zlib1g-dev libbz2-dev fakeroot kmod libncurses5 dkms jq curl

      - name: 获取最新内核版本
        id: get_kernel_version
        run: |
          LATEST_KERNEL_VERSION=$(git ls-remote --tags https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git \
            | awk -F'/' '{print $3}' \
            | grep -E '^v[0-9]+\.[0-9]+(\.[0-9]+)?$' \
            | grep -v -E "rc|test" \
            | sort -V \
            | tail -1)
          echo "LATEST_KERNEL_VERSION=$LATEST_KERNEL_VERSION" >> $GITHUB_OUTPUT

      - name: 获取GitHub现有最新发行版本号
        id: get_github_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: byJoey/Actions-bbr-v3
        run: |
          LATEST_GITHUB_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/releases \
            | jq -r '[.[] | select(.prerelease == false)][0].tag_name')
          echo "LATEST_GITHUB_RELEASE=$LATEST_GITHUB_RELEASE" >> $GITHUB_OUTPUT

      - name: 判断是否需要更新
        run: |
          if [ "${{ steps.get_github_release.outputs.LATEST_GITHUB_RELEASE }}" = "${{ steps.get_kernel_version.outputs.LATEST_KERNEL_VERSION }}" ]; then
            echo "无需更新内核版本。"
            echo "no-update" > no_update_flag
          fi

      - name: 传递no-update标记
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: no_update_flag
          path: no_update_flag
          if-no-files-found: ignore

      - name: 若无需更新则提前结束本Job
        if: files.exist('no_update_flag')
        run: exit 0

      - name: 准备x86_64配置文件
        run: |
          curl -L https://raw.githubusercontent.com/byJoey/Actions-bbr-v3/main/x86-64.config -o x86-64.config

      - name: 编译 x86_64 内核
        run: |
          git clone --branch ${{ steps.get_kernel_version.outputs.LATEST_KERNEL_VERSION }} --depth 1 https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
          cd linux
          KERNEL_VERSION=$(make kernelversion)

          git remote add google-bbr https://github.com/google/bbr.git
          git fetch google-bbr
          git checkout google-bbr/v3

          sed -i "s/^VERSION = .*/VERSION = ${KERNEL_VERSION%%.*}/" Makefile
          sed -i "s/^PATCHLEVEL = .*/PATCHLEVEL = $(echo $KERNEL_VERSION | cut -d. -f2)/" Makefile
          sed -i "s/^SUBLEVEL = .*/SUBLEVEL = $(echo $KERNEL_VERSION | cut -d. -f3 | cut -d- -f1)/" Makefile

          cp ../x86-64.config .config
          make olddefconfig
          sed -i '/CONFIG_SYSTEM_TRUSTED_KEYS/d' .config
          echo 'CONFIG_SYSTEM_TRUSTED_KEYS=""' >> .config
          sed -i 's/CONFIG_DEBUG_INFO=y/CONFIG_DEBUG_INFO=n/' .config
          make olddefconfig
          make LOCALVERSION=-joeyblog-joeyblog.net KBUILD_BUILD_DEBUG_INFO=n bindeb-pkg -j$(nproc)

          cd ..
          mkdir -p kernel_release_x86_64
          mv linux-image-*.deb linux-headers-*.deb kernel_release_x86_64/
          tar -czvf kernel_release_x86_64_${KERNEL_VERSION}.tar.gz -C kernel_release_x86_64 .
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

      - name: 上传 x86_64 构建产物
        uses: actions/upload-artifact@v3
        with:
          name: x86_64_build
          path: kernel_release_x86_64_*.tar.gz

  build-arm64:
    # 使用容器进行 arm64 交叉编译，这里使用 multiarch/crossbuild:arm64 作为示例
    # 请确保该镜像已具备 crossbuild 必要环境或在容器中运行apt安装
    runs-on: ubuntu-latest
    container:
      image: multiarch/crossbuild:arm64
    steps:
      - name: 下载no-update标记(判断是否需要构建)
        uses: actions/download-artifact@v3
        with:
          name: no_update_flag
          path: .
      - name: 若无需更新则提前结束本Job
        if: files.exist('no_update_flag')
        run: exit 0

      - name: 检出代码
        uses: actions/checkout@v3

      - name: 安装ARM64编译依赖(容器内)
        run: |
          apt-get update
          # 若容器已包含必要工具则可省略
          apt-get install -y git build-essential libncurses-dev libssl-dev libelf-dev bison bc flex rsync debhelper \
             vim gcc make zlib1g-dev libbz2-dev fakeroot kmod libncurses5 dkms jq curl gcc-aarch64-linux-gnu

      - name: 准备ARM64配置文件
        run: |
          curl -L https://raw.githubusercontent.com/byJoey/Actions-bbr-v3/main/arm64.config -o arm64.config

      - name: 获取内核版本 (从x86 job artifact中获取)
        # 若需要从另一个Job获得内核版本，可尝试将KERNEL_VERSION以artifact或outputs的形式传递
        # 此处假设从x86_64构建Job中已得出 KERNEL_VERSION
        # 为演示简单，这里重新获取最新版本
        id: get_kernel_version
        run: |
          LATEST_KERNEL_VERSION=$(git ls-remote --tags https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git \
            | awk -F'/' '{print $3}' \
            | grep -E '^v[0-9]+\.[0-9]+(\.[0-9]+)?$' \
            | grep -v -E "rc|test" \
            | sort -V \
            | tail -1)
          echo "LATEST_KERNEL_VERSION=$LATEST_KERNEL_VERSION" >> $GITHUB_OUTPUT

      - name: 编译 ARM64 内核
        run: |
          git clone --branch ${{ steps.get_kernel_version.outputs.LATEST_KERNEL_VERSION }} --depth 1 https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
          cd linux
          KERNEL_VERSION=$(make kernelversion)

          git remote add google-bbr https://github.com/google/bbr.git
          git fetch google-bbr
          git checkout google-bbr/v3

          sed -i "s/^VERSION = .*/VERSION = ${KERNEL_VERSION%%.*}/" Makefile
          sed -i "s/^PATCHLEVEL = .*/PATCHLEVEL = $(echo $KERNEL_VERSION | cut -d. -f2)/" Makefile
          sed -i "s/^SUBLEVEL = .*/SUBLEVEL = $(echo $KERNEL_VERSION | cut -d. -f3 | cut -d- -f1)/" Makefile

          cp ../arm64.config .config
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig
          sed -i '/CONFIG_SYSTEM_TRUSTED_KEYS/d' .config
          echo 'CONFIG_SYSTEM_TRUSTED_KEYS=""' >> .config
          sed -i 's/CONFIG_DEBUG_INFO=y/CONFIG_DEBUG_INFO=n/' .config
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig

          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- LOCALVERSION=-joeyblog-joeyblog.net KBUILD_BUILD_DEBUG_INFO=n bindeb-pkg -j$(nproc)
          
          cd ..
          mkdir -p kernel_release_arm64
          mv linux-image-*.deb linux-headers-*.deb kernel_release_arm64/
          tar -czvf kernel_release_arm64_${KERNEL_VERSION}.tar.gz -C kernel_release_arm64 .
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

      - name: 上传 ARM64 构建产物
        uses: actions/upload-artifact@v3
        with:
          name: arm64_build
          path: kernel_release_arm64_*.tar.gz

  release:
    runs-on: ubuntu-latest
    needs: [build-x86, build-arm64]
    steps:
      - name: 下载x86构建产物
        uses: actions/download-artifact@v3
        with:
          name: x86_64_build
          path: .

      - name: 下载ARM64构建产物
        uses: actions/download-artifact@v3
        with:
          name: arm64_build
          path: .

      - name: 决定是否发布
        run: |
          if [ -f no_update_flag ]; then
            echo "无需发布。"
            exit 0
          fi
          # 从任意一个tar.gz里提取版本号(这里假设文件名中含有版本号)
          KERNEL_VERSION=$(ls kernel_release_x86_64_*.tar.gz | sed 's/kernel_release_x86_64_//; s/.tar.gz//')
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

      - name: 创建并上传发行版
        if: success() && steps.determine.outputs.result != 'no-update'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: byJoey/Actions-bbr-v3
        run: |
          TAG="v${KERNEL_VERSION}"
          RELEASE_RESPONSE=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/json" \
            -d "{\"tag_name\": \"$TAG\", \"name\": \"Kernel $KERNEL_VERSION (arm64 & x86_64)\", \"body\": \"自动生成的内核发行版本 $KERNEL_VERSION 包含ARM64和x86_64内核包以及BBR v3。\"}" \
            https://api.github.com/repos/$REPO/releases)
          UPLOAD_URL=$(echo $RELEASE_RESPONSE | jq -r .upload_url | sed -e "s/{?name,label}//")

          if [ "$UPLOAD_URL" 
