name: 使用 BBR v3 编译内核并发布

on:
  # 当推送至 main 分支时触发
  push:
    branches: [ main ]
  # 支持手动触发
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      REPO: byJoey/Actions-bbr-v3
      # 使用 GitHub 提供的 GITHUB_TOKEN 以执行操作（无需自定义 token）
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v3

      - name: 设置 Bash 脚本遇错停止
        run: set -e

      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y git build-essential libncurses-dev libssl-dev libelf-dev bison bc flex rsync debhelper vim gcc make zlib1g-dev libbz2-dev fakeroot kmod libncurses5 dkms jq curl

      - name: 获取最新内核版本
        id: get_kernel
        run: |
          LATEST_KERNEL_VERSION=$(git ls-remote --tags https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git | awk -F'/' '{print $3}' | grep -E '^v[0-9]+\.[0-9]+(\.[0-9]+)?$' | grep -v -E "rc|test" | sort -V | tail -1)
          echo "LATEST_KERNEL_VERSION=${LATEST_KERNEL_VERSION}" >> $GITHUB_ENV

      - name: 获取 GitHub 最新已发布版本
        id: get_github_release
        run: |
          LATEST_GITHUB_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO/releases | jq -r '[.[] | select(.prerelease == false)][0].tag_name')
          echo "LATEST_GITHUB_RELEASE=${LATEST_GITHUB_RELEASE}" >> $GITHUB_ENV

      - name: 版本比较
        run: |
          if [[ "${LATEST_GITHUB_RELEASE}" == "${LATEST_KERNEL_VERSION}" ]]; then
            echo "GitHub 发布的版本与最新内核版本一致，无需更新。"
            exit 0
          fi

      - name: 清理之前的文件
        run: rm -rf linux kernel_release kernel_release_arm64.tar.gz kernel_release_x86_64.tar.gz

      - name: 克隆最新内核源码
        run: git clone --branch ${{ env.LATEST_KERNEL_VERSION }} --depth 1 https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git

      - name: 获取当前内核版本号
        working-directory: linux
        id: kernel_version
        run: |
          KERNEL_VERSION=$(make kernelversion)
          echo "KERNEL_VERSION=${KERNEL_VERSION}" >> $GITHUB_ENV

      - name: 添加并切换到 BBR v3 分支
        working-directory: linux
        run: |
          git remote add google-bbr https://github.com/google/bbr.git
          git fetch google-bbr
          git checkout google-bbr/v3
          sed -i "s/^VERSION = .*/VERSION = ${KERNEL_VERSION%%.*}/" Makefile
          sed -i "s/^PATCHLEVEL = .*/PATCHLEVEL = $(echo $KERNEL_VERSION | cut -d. -f2)/" Makefile
          sed -i "s/^SUBLEVEL = .*/SUBLEVEL = $(echo $KERNEL_VERSION | cut -d. -f3 | cut -d- -f1)/" Makefile

      - name: 下载配置文件 (arm64 和 x86_64)
        working-directory: linux
        run: |
          curl -L https://raw.githubusercontent.com/byJoey/Actions-bbr-v3/refs/heads/main/arm64.config -o arm64.config
          curl -L https://raw.githubusercontent.com/byJoey/Actions-bbr-v3/refs/heads/main/x86-64.config -o x86-64.config

      - name: 编译 ARM64 内核
        working-directory: linux
        run: |
          cp arm64.config .config
          yes "" | make oldconfig
          sed -i '/CONFIG_SYSTEM_TRUSTED_KEYS/d' .config
          echo 'CONFIG_SYSTEM_TRUSTED_KEYS=""' >> .config
          sed -i 's/CONFIG_DEBUG_INFO=y/CONFIG_DEBUG_INFO=n/' .config
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- LOCALVERSION=-joeyblog-joeyblog.net KBUILD_BUILD_DEBUG_INFO=n bindeb-pkg -j$(nproc)

      - name: 保存 ARM64 编译产物
        run: |
          mkdir -p kernel_release/arm64
          mv linux-image-*.deb linux-headers-*.deb kernel_release/arm64/
          tar -czvf kernel_release_arm64_${{ env.KERNEL_VERSION }}.tar.gz -C kernel_release/arm64 .

      - name: 再次克隆源码用于 x86_64 编译
        run: |
          rm -rf linux
          git clone --branch ${{ env.LATEST_KERNEL_VERSION }} --depth 1 https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git

      - name: 添加并切换 BBR v3 分支 (x86_64)
        working-directory: linux
        run: |
          git remote add google-bbr https://github.com/google/bbr.git
          git fetch google-bbr
          git checkout google-bbr/v3
          sed -i "s/^VERSION = .*/VERSION = ${KERNEL_VERSION%%.*}/" Makefile
          sed -i "s/^PATCHLEVEL = .*/PATCHLEVEL = $(echo $KERNEL_VERSION | cut -d. -f2)/" Makefile
          sed -i "s/^SUBLEVEL = .*/SUBLEVEL = $(echo $KERNEL_VERSION | cut -d. -f3 | cut -d- -f1)/" Makefile

      - name: 编译 x86_64 内核
        working-directory: linux
        run: |
          curl -L https://raw.githubusercontent.com/byJoey/Actions-bbr-v3/refs/heads/main/x86-64.config -o .config
          yes "" | make oldconfig
          sed -i '/CONFIG_SYSTEM_TRUSTED_KEYS/d' .config
          echo 'CONFIG_SYSTEM_TRUSTED_KEYS=""' >> .config
          sed -i 's/CONFIG_DEBUG_INFO=y/CONFIG_DEBUG_INFO=n/' .config
          make ARCH=x86_64 CROSS_COMPILE=x86_64-linux-gnu- LOCALVERSION=-joeyblog-joeyblog.net KBUILD_BUILD_DEBUG_INFO=n bindeb-pkg -j$(nproc)

      - name: 保存 x86_64 编译产物
        run: |
          mkdir -p kernel_release/x86_64
          mv linux-image-*.deb linux-headers-*.deb kernel_release/x86_64/
          tar -czvf kernel_release_x86_64_${{ env.KERNEL_VERSION }}.tar.gz -C kernel_release/x86_64 .

      - name: 创建 GitHub Release
        id: create_release
        run: |
          TAG="v${KERNEL_VERSION}"
          RELEASE_NAME="Kernel ${KERNEL_VERSION} (arm64 & x86_64)"
          RELEASE_DATA=$(jq -n --arg tag "$TAG" --arg name "$RELEASE_NAME" --arg body "Auto-generated release for kernel version ${KERNEL_VERSION} (arm64 & x86_64)" \
            '{ tag_name: $tag, name: $name, body: $body }')
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$RELEASE_DATA" \
            https://api.github.com/repos/$REPO/releases)
          UPLOAD_URL=$(echo "$RESPONSE" | jq -r .upload_url | sed -e "s/{?name,label}//")
          echo "UPLOAD_URL=${UPLOAD_URL}" >> $GITHUB_ENV
          if [ "$UPLOAD_URL" == "null" ]; then
            echo "创建 GitHub Release 失败。"
            echo "$RESPONSE"
            exit 1
          fi

      - name: 上传 ARM64 内核产物
        run: |
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/gzip" \
            --data-binary @kernel_release_arm64_${KERNEL_VERSION}.tar.gz \
            "${UPLOAD_URL}?name=kernel_release_arm64_${KERNEL_VERSION}.tar.gz"

      - name: 上传 x86_64 内核产物
        run: |
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/gzip" \
            --data-binary @kernel_release_x86_64_${KERNEL_VERSION}.tar.gz \
            "${UPLOAD_URL}?name=kernel_release_x86_64_${KERNEL_VERSION}.tar.gz"

      - name: 完成
        run: echo "构建与发布完成！请前往 GitHub Release 页面查看。"
